import { z } from 'zod';

// schemas for analyze-network-logs.ts
export const AnalyzeNetworkLogsInputSchema = z.object({
  networkLogs: z
    .string()
    .describe('Network logs in text format. Include timestamps and source/destination IPs.'),
});
export type AnalyzeNetworkLogsInput = z.infer<typeof AnalyzeNetworkLogsInputSchema>;

export const AnalyzeNetworkLogsOutputSchema = z.object({
  anomalies: z
    .array(z.string())
    .describe('A list of detected anomalies in the network logs.'),
  severity: z
    .string()
    .describe(
      'The overall severity of the detected anomalies (e.g., low, medium, high).' + 
      'Return one of these values: LOW, MEDIUM, HIGH'
    ),
  suggestedActions: z
    .string()
    .describe('Suggested actions to mitigate the detected anomalies.'),
});
export type AnalyzeNetworkLogsOutput = z.infer<typeof AnalyzeNetworkLogsOutputSchema>;

// schemas for analyze-website.ts
export const AnalyzeWebsiteInputSchema = z.object({
  url: z.string().url().describe('The URL of the website to analyze.'),
});
export type AnalyzeWebsiteInput = z.infer<typeof AnalyzeWebsiteInputSchema>;

export const AnalyzeWebsiteOutputSchema = z.object({
  securityScore: z
    .number()
    .min(0)
    .max(100)
    .describe('An overall security score for the website, from 0 to 100.'),
  vulnerabilitySummary: z
    .string()
    .describe('A brief summary of potential vulnerabilities found.'),
  performanceGrade: z
    .enum(['A', 'B', 'C', 'D', 'F'])
    .describe('A performance grade (A-F) based on simulated speed and optimization checks.'),
  recommendations: z
    .array(z.string())
    .describe('A list of actionable recommendations to improve security and performance.'),
});
export type AnalyzeWebsiteOutput = z.infer<typeof AnalyzeWebsiteOutputSchema>;

// schemas for explain-threat.ts
export const ExplainThreatInputSchema = z.object({
  threat: z.string().describe('The name of the threat, e.g., "SQL Injection Attempt".'),
  severity: z.string().describe('The severity of the threat (High, Medium, or Low).'),
  sourceIp: z.string().describe('The source IP address of the threat.'),
  status: z.string().describe('The current status of the threat (e.g., Blocked, Mitigated).'),
  date: z.string().describe('The date and time the threat was detected.'),
});
export type ExplainThreatInput = z.infer<typeof ExplainThreatInputSchema>;

export const ExplainThreatOutputSchema = z.object({
  explanation: z
    .string()
    .describe('A clear, human-readable explanation of what the threat is and its potential impact.'),
  recommendations: z
    .array(z.string())
    .describe('A list of specific, actionable steps the user should take to mitigate the threat and improve security.'),
});
export type ExplainThreatOutput = z.infer<typeof ExplainThreatOutputSchema>;


// schemas for generate-firewall-rules.ts
export const GenerateFirewallRulesInputSchema = z.object({
  objective: z.string().describe("The user's high-level security objective (e.g., 'Block all traffic from North Korea')."),
});
export type GenerateFirewallRulesInput = z.infer<typeof GenerateFirewallRulesInputSchema>;

const FirewallRuleSchema = z.object({
    action: z.string().describe("The action to take (e.g., 'DENY', 'ALLOW')."),
    protocol: z.string().describe("The protocol (e.g., 'TCP', 'UDP', 'ANY')."),
    source: z.string().describe("The source IP address or range (e.g., '192.168.1.0/24', 'ANY')."),
    destination: z.string().describe("The destination IP address or range."),
    port: z.string().describe("The port number or range (e.g., '443', '1024-65535')."),
    description: z.string().describe("A human-readable description of what the rule does."),
});

export const GenerateFirewallRulesOutputSchema = z.object({
    rules: z.array(FirewallRuleSchema).describe("A list of generated firewall rules."),
});
export type GenerateFirewallRulesOutput = z.infer<typeof GenerateFirewallRulesOutputSchema>;


// schemas for generate-it-report.ts
export const GenerateItReportInputSchema = z.object({
  name: z.string().describe('The name of the person submitting the report.'),
  email: z.string().email().describe('The email address of the person submitting the report.'),
  subject: z.string().describe('The user-provided subject line for the issue.'),
  description: z.string().describe('The user-provided description of the issue.'),
});
export type GenerateItReportInput = z.infer<typeof GenerateItReportInputSchema>;

export const GenerateItReportOutputSchema = z.object({
  generatedSubject: z.string().describe('A concise, AI-generated subject line for the IT report.'),
  generatedBody: z.string().describe('A detailed, well-structured report body generated by the AI.'),
});
export type GenerateItReportOutput = z.infer<typeof GenerateItReportOutputSchema>;
